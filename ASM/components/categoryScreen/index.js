import React, { useEffect, useState } from "react";
import { View, TouchableOpacity, Text, FlatList, Image } from "react-native";
import { Ionicons } from "@expo/vector-icons";
import { useRoute, useNavigation } from "@react-navigation/native";
import API_BASE_URL from "../localhost/localhost";
import { styles } from "./styles";

const CategoryScreen = () => {
    const route = useRoute();
    const navigation = useNavigation();
    const { categoryId } = route.params || {}; // Ki·ªÉm tra n·∫øu categoryId t·ªìn t·∫°i

    const [category, setCategory] = useState(null); // L∆∞u th√¥ng tin danh m·ª•c
    const [products, setProducts] = useState([]); // L∆∞u danh s√°ch s·∫£n ph·∫©m
    const [loading, setLoading] = useState(true);

    // L·∫•y danh m·ª•c t·ª´ API
    const fetchCategory = async () => {
        if (!categoryId) return; 
        try {
            const response = await fetch(`${API_BASE_URL}/api/categories/getByID/${categoryId}`);
            console.log("üì• Ph·∫£n h·ªìi API danh m·ª•c:", response.status);
    
            if (!response.ok) {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y danh m·ª•c");
            }
    
            const data = await response.json();
            console.log("‚úÖ D·ªØ li·ªáu danh m·ª•c nh·∫≠n ƒë∆∞·ª£c:", data);
            setCategory(data);
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y danh m·ª•c:", error.message);
        }
    };
    
    const fetchProductsByCategory = async () => {
        if (!categoryId) return;
        try {
            const response = await fetch(`${API_BASE_URL}/api/products/category?categoryId=${categoryId}`);
            console.log("Ph·∫£n h·ªìi API s·∫£n ph·∫©m:", response.status);
    
            if (!response.ok) {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y s·∫£n ph·∫©m");
            }
    
            const data = await response.json();
            console.log("D·ªØ li·ªáu s·∫£n ph·∫©m nh·∫≠n ƒë∆∞·ª£c:", data);
            setProducts(data);
        } catch (error) {
            console.error("L·ªói khi l·∫•y s·∫£n ph·∫©m:", error.message);
        } finally {
            setLoading(false);
        }
    };
    
    useEffect(() => {
        console.log("categoryId nh·∫≠n ƒë∆∞·ª£c:", categoryId);
        fetchCategory();
        fetchProductsByCategory();
    }, [categoryId]);
    

    return (
        <View style={{ flex: 1, padding: 20 }}>
            <View style={styles.titleContainer}>
                <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
                    <Ionicons name="arrow-back" size={24} color="black" />
                </TouchableOpacity>

                {/* Hi·ªÉn th·ªã danh m·ª•c */}
                {category ? (
                    <Text style={styles.title}>{category.name}</Text>
                ) : (
                    <Text style={styles.title}>ƒêang t·∫£i danh m·ª•c...</Text>
                )}
            </View>
           

            {/* Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m (Gi·ªõi h·∫°n 4 s·∫£n ph·∫©m) */}
            {loading ? (
                <Text>ƒêang t·∫£i s·∫£n ph·∫©m...</Text>
            ) : products.length > 0 ? (
                <FlatList
                    data={products.length % 2 === 1 ? [...products, { _id: "dummy" }] : products} 
                    keyExtractor={(item) => item._id.toString()}
                    numColumns={2}
                    columnWrapperStyle={styles.flatListContainer}
                    contentContainerStyle={{ paddingBottom: 20 }}
                    renderItem={({ item }) =>
                        item._id === "dummy" ? ( // Ki·ªÉm tra n·∫øu l√† item r·ªóng
                            <View style={[styles.productItem, { backgroundColor: "transparent", elevation: 0 }]} />
                        ) : (
                            <TouchableOpacity
                                style={styles.productItem}
                                onPress={() => navigation.navigate("DetailScreen", { product: item })}
                            >
                                <Image
                                    source={{ uri: `${API_BASE_URL}${item.image}` }}
                                    style={styles.productImage}
                                />
                                <Text style={styles.productName} numberOfLines={2}>
                                    {item.name}
                                </Text>
                                <Text style={styles.productPrice}>{item.price.toLocaleString()} VND</Text>
                            </TouchableOpacity>
                        )
                    }
                />

            ) : (
                <Text>Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh m·ª•c n√†y.</Text>
            )}
        </View>

    );
};

export default CategoryScreen;
