import React, { useEffect, useState } from "react";
import { View, Text, FlatList, TouchableOpacity, Alert, ActivityIndicator } from "react-native";
import axios from "axios";
import API_BASE_URL from "../localhost/localhost";

const ConfirmScreen = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        fetchOrders();
    }, []);

    const fetchOrders = async () => {
        setLoading(true);
        try {
            const response = await axios.get(
                `${API_BASE_URL}/api/orders/status/ƒêang v·∫≠n chuy·ªÉn`
            );
            setOrders(response.data);
        } catch (error) {
            console.error("L·ªói khi t·∫£i ƒë∆°n h√†ng:", error);

            if (error.response && error.response.status === 404) {
                setOrders([]); // Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o
            } else {
                Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng!");
            }
        } finally {
            setLoading(false);
        }
    };

    const handleConfirmOrder = async (orderId) => {
        try {
            const response = await axios.put(
                `${API_BASE_URL}/api/orders/update/${orderId}`,
                { status: "ƒê√£ giao" }
            );

            if (response.status === 200) {
                fetchOrders(); // üîÑ C·∫≠p nh·∫≠t danh s√°ch sau khi x√°c nh·∫≠n
                Alert.alert("Th√†nh c√¥ng", "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!");
            } else {
                Alert.alert("L·ªói", "X√°c nh·∫≠n th·∫•t b·∫°i, th·ª≠ l·∫°i!");
            }
        } catch (error) {
            console.error("L·ªói khi x√°c nh·∫≠n ƒë∆°n h√†ng:", error);
            Alert.alert("L·ªói", "C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n ƒë∆°n h√†ng!");
        }
    };

    return (
        <View style={{ flex: 1, padding: 20 }}>
            {loading ? (
                <ActivityIndicator size="large" color="blue" />
            ) : orders.length === 0 ? (
                <Text style={{ textAlign: "center", marginTop: 20 }}>Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o</Text>
            ) : (
                <FlatList
                    data={orders}
                    keyExtractor={(item) => item._id}
                    refreshing={loading}
                    onRefresh={fetchOrders}
                    renderItem={({ item }) => (
                        <View style={{ padding: 10, borderBottomWidth: 1 }}>
                            <Text>Ng∆∞·ªùi ƒë·∫∑t: {item.userName}</Text>
                            <Text>ƒê·ªãa ch·ªâ: {item.address}</Text>
                            <Text>Ng√†y ƒë·∫∑t: {new Date(item.createdAt).toLocaleDateString()}</Text>
                            <Text>T·ªïng ti·ªÅn: {item.total} VND</Text>

                            <Text style={{ fontWeight: "bold", marginTop: 5 }}>S·∫£n ph·∫©m:</Text>
                            {item.products.map((product, index) => (
                                <Text key={index}>- {product.name} (SL: {product.quantity})</Text>
                            ))}

                            <TouchableOpacity
                                onPress={() => handleConfirmOrder(item._id)}
                                style={{ backgroundColor: "blue", padding: 10, marginTop: 10 }}
                            >
                                <Text style={{ color: "white", textAlign: "center" }}>X√°c nh·∫≠n ƒë∆°n h√†ng</Text>
                            </TouchableOpacity>
                        </View>
                    )}
                />
            )}
        </View>
    );
};

export default ConfirmScreen;
